{
    "0": {
        "question": "Match `is` anywhere in the given input strings.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "Regex is awesome",
            "Thistle",
            "This should also match"
        ],
        "right column": [
            "IS",
            "grep sed awk ls ip",
            "Th1s should not match"
        ],
        "Reference solution": "re.search(r'is', s)"
    },
    "1": {
        "question": "Match `is` anywhere in the given input strings, irrespective of case.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "Regex is awesome",
            "THiStLe",
            "THIS SHOULD ALSO MATCH"
        ],
        "right column": [
            "first",
            "grep sed awk ls ip",
            "Th1s should not match"
        ],
        "Reference solution": "re.search(r'is', s, flags=re.I)"
    },
    "2": {
        "question": "Replace all occurrences of `5` with `five` for the given strings.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "They ate 5 apples and 5 oranges",
            "515515",
            "1) 3) 5) 7)"
        ],
        "right column": [
            "They ate five apples and five oranges",
            "five1fivefive1five",
            "1) 3) five) 7)"
        ],
        "Reference solution": "re.sub(r'5', r'five', s)"
    },
    "3": {
        "question": "Match lines only if they start with `be`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "be nice",
            "better?",
            "best\nview",
            "nice\nbell"
        ],
        "right column": [
            "\"best!\"",
            "abetter",
            "oh no\na bear spotted",
            "ball\ntell"
        ],
        "Reference solution": "re.search(r'^be', s, flags=re.M)"
    },
    "4": {
        "question": "Change only whole word `red` to `brown`.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "bred",
            "light red.",
            "reddish leaf",
            "credible",
            "red"
        ],
        "right column": [
            "bred",
            "light brown.",
            "reddish leaf",
            "credible",
            "brown"
        ],
        "Reference solution": "re.sub(r'\\bred\\b', r'brown', s)"
    },
    "5": {
        "question": "Match `42` only if it is surrounded by word characters.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "hi42bye",
            "nice1423",
            "cool_42a",
            "_42_"
        ],
        "right column": [
            "bad42",
            "fa42-fa",
            "42cool",
            ":42z"
        ],
        "Reference solution": "re.search(r'\\B42\\B', s)"
    },
    "6": {
        "question": "Match `hand` at the start of a word followed immediately by at least one word character.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "handle",
            "this is handy",
            "un-handed",
            "over:hands"
        ],
        "right column": [
            "hand",
            "unhanded",
            "hand-2",
            "short-hand"
        ],
        "Reference solution": "re.search(r'\\bhand\\B', s)"
    },
    "7": {
        "question": "Change whole word `mall` to `1234` only if it is at the start of a line.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "(mall) call ball pall\nball fall wall tall\nmall call ball pall\nwall mall ball fall\nmallet wallet malls\nmall:call:ball:pall"
        ],
        "right column": [
            "(mall) call ball pall\nball fall wall tall\n1234 call ball pall\nwall mall ball fall\nmallet wallet malls\n1234:call:ball:pall"
        ],
        "Reference solution": "re.sub(r'^mall\\b', r'1234', s, flags=re.M)"
    },
    "8": {
        "question": "Match `to` or `an` anywhere in the given input strings.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "collaborator",
            "tool",
            "transistor",
            "androids"
        ],
        "right column": [
            "tea",
            "past",
            "about",
            "Anvil"
        ],
        "Reference solution": "re.search(r'to|an', s)"
    },
    "9": {
        "question": "Match strings that start with `den` or end with `ly`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "lovely",
            "2 lonely",
            "dent"
        ],
        "right column": [
            "1\ndentist",
            "eden",
            "fly\n"
        ],
        "Reference solution": "re.search(r'\\Aden|ly\\Z', s)"
    },
    "10": {
        "question": "Match `(9-2)*5` anywhere in the given input strings.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "(9-2)*5+qty/3",
            "(qty+4)/2-(9-2)*5+pq/4",
            "3*(9-2)*55"
        ],
        "right column": [
            "(8-2)*5",
            "9-25",
            "(9-2)*15"
        ],
        "Reference solution": "re.search(r'\\(9-2\\)\\*5', s)"
    },
    "11": {
        "question": "Match `(4)\\|` only at the start or end of given input strings.",
        "flags": "8",
        "function": "re.search",
        "left column": [
            "2+(4)\\|",
            "good\n5.3-(4)\\|",
            "(4)\\|42 - (4)\\|3",
            "(4)\\| - 3\nnot bad"
        ],
        "right column": [
            "2+(4)\\|a",
            "one - (4)\\|\ntwo",
            "b(4)\\|42 - (4)\\|3",
            "oops\n(4)\\|42"
        ],
        "Reference solution": "re.search(r'\\A\\(4\\)\\\\\\||\\(4\\)\\\\\\|\\Z', s)"
    },
    "12": {
        "question": "Construct a minimal pattern that satisfies the given sample strings.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "that's so good",
            "hit the mark",
            "2+gh*t-10"
        ],
        "right column": [
            "it",
            "he",
            "2+gt-h1"
        ],
        "Reference solution": "re.search(r'h.t', s)"
    },
    "13": {
        "question": "For the given single line strings, remove everything from the first occurrence of `i` till end of the string.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "remove the special meaning of such",
            "characters while constructing",
            "input output"
        ],
        "right column": [
            "remove the spec",
            "characters wh",
            ""
        ],
        "Reference solution": "re.sub(r'i.*', r'', s)"
    },
    "14": {
        "question": "For the given single line strings, replace everything from the first occurrence of `test` (irrespective of case) till end of the string with `X`, provided `test` isn't at the end of the string.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "this is a Test",
            "always test your RE for corner cases",
            "a TEST of skill tests?"
        ],
        "right column": [
            "this is a Test",
            "always X",
            "a X"
        ],
        "Reference solution": "re.sub(r'test.+', r'X', s, flags=re.I)"
    },
    "15": {
        "question": "Split the given input strings to get the corresponding output as shown below.",
        "flags": "0",
        "function": "re.split",
        "left column": [
            "a+42//5-c",
            "pressure*3+42/5-14256",
            "r*42-5/3+42///5-42/53+a"
        ],
        "right column": [
            "['a+', '-c']",
            "['pressure*3+', '-14256']",
            "['r*42-5/3+42///5-', '3+a']"
        ],
        "Reference solution": "re.split(r'42//?5', s)"
    },
    "16": {
        "question": "Match `removed` or `reed` or `received` or `refused`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "creed",
            "removed",
            "received",
            "refused",
            "reedy",
            "they refused"
        ],
        "right column": [
            "redo",
            "apple",
            "roceived",
            "defused",
            "resolved",
            "reel"
        ],
        "Reference solution": "re.search(r're(mov|ceiv|fus)?ed', s)"
    },
    "17": {
        "question": "Match whole words `late` or `later` or `slated`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "don't be late",
            "see you later today",
            "slated for tomorrow",
            "%late.",
            "plate (later)",
            "slated"
        ],
        "right column": [
            "slate",
            "liter",
            "latent",
            "plated",
            "slates",
            "equilateral"
        ],
        "Reference solution": "re.search(r'\\b(later?|slated)\\b', s)"
    },
    "18": {
        "question": "Match strings starting with `hand` and followed immediately by at most one more character or `le`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "hand",
            "handy",
            "hands",
            "handle"
        ],
        "right column": [
            "unhand",
            "handled",
            "handed",
            "no hands"
        ],
        "Reference solution": "re.search(r'\\Ahand(.|le)?\\Z', s)"
    },
    "19": {
        "question": "Match strings starting with `s` and containing `e` and `t` in any order.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "subtle",
            "sets",
            "site",
            "so this matches"
        ],
        "right column": [
            "sequoia",
            "exhibits",
            "stop",
            "tested"
        ],
        "Reference solution": "re.search(r'\\As.*(e.*t|t.*e)', s)\nre.search(r'\\As(?=.*e)(?=.*t)', s)"
    },
    "20": {
        "question": "Match strings containing at least 6 characters.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "sequoia",
            "subtle",
            "exhibit",
            "so this matches",
            "12\n345"
        ],
        "right column": [
            "tests",
            "set",
            "site",
            "on",
            "do\nto"
        ],
        "Reference solution": "re.search(r'.{6}', s, flags=re.S)"
    },
    "21": {
        "question": "Remove from first occurrence of `hat` to last occurrence of `it` for the given input strings. Match these markers case insensitively.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "But Cool THAT\nsee What ok\nwow quite",
            "it this hat is sliced HIT."
        ],
        "right column": [
            "But Cool Te",
            "it this ."
        ],
        "Reference solution": "re.sub(r'hat.*it', r'', s, flags=re.S|re.I)"
    },
    "22": {
        "question": "Delete from `start` if it is at the beginning of a line up to the next occurrence of the `end` at the end of a line. Match these markers case insensitively.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "good start\nstart working on that\nproject you always wanted\nto, do not let it end\nhi there\nstart and end the end\n42\nStart and try to\nfinish the End\nbye"
        ],
        "right column": [
            "good start\n\nhi there\n\n42\n\nbye"
        ],
        "Reference solution": "re.sub(r'(?ims)^start.*?end$', r'', s)\nre.sub(r'^start.*?end$', r'', s, flags=re.I|re.M|re.S)"
    },
    "23": {
        "question": "Construct a pattern that splits the given input strings to get the output as shown below.",
        "flags": "0",
        "function": "re.split",
        "left column": [
            "go there  //   \"this // that\"",
            "a//b // c//d e//f // 4//5",
            "42// hi//bye//see // carefully"
        ],
        "right column": [
            "['go there', '\"this', 'that\"']",
            "['a//b', 'c//d e//f', '4//5']",
            "['42// hi//bye//see', 'carefully']"
        ],
        "Reference solution": "re.split(r' +// +', s)"
    },
    "24": {
        "question": "Extract all occurrences of `<` up to next occurrence of `>`, provided there is at least one character in between `<` and `>`.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "a<ap\nple>\n1<> b<bye> 2<>"
        ],
        "right column": [
            "['<ap\\nple>', '<> b<bye>']"
        ],
        "Reference solution": "re.findall(r'<.+?>', s, flags=re.S)"
    },
    "25": {
        "question": "Match all strings containing `e` or `i` followed by `l` or `n`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "don't\nsurrender",
            "unicorn",
            "eel",
            "silk",
            "this is\ncool"
        ],
        "right column": [
            "this is\nbad",
            "door",
            "empty",
            "list",
            "never\ngive up"
        ],
        "Reference solution": "re.search(r'[ei].*[ln]', s, flags=re.S)"
    },
    "26": {
        "question": "Replace all whole words `reed` or `read` or `red` with `X`.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "redo red credible :read: rod reed"
        ],
        "right column": [
            "redo X credible :X: rod X"
        ],
        "Reference solution": "re.sub(r'\\bre[ae]?d\\b', r'X', s)"
    },
    "27": {
        "question": "Change whole words starting with `hand` and ending with `s` or `y` or `le` to `X.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "handsy hand (handy)\nunhand hands handle\nhanda hand2 handled"
        ],
        "right column": [
            "handsy hand (X)\nunhand X X\nhanda hand2 handled"
        ],
        "Reference solution": "re.sub(r'\\bhand([sy]|le)\\b', r'X', s)"
    },
    "28": {
        "question": "Delete from `(` to the next occurrence of `)` unless they contain parentheses characters in between.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "def factorial()",
            "c%d(#modulo) - (e+(j/k-3)*4(x))",
            "Hi there(bye). Nice day(a(b)"
        ],
        "right column": [
            "def factorial",
            "c%d - (e+*4)",
            "Hi there. Nice day(a"
        ],
        "Reference solution": "re.sub(r'\\([^()]*\\)', r'', s)"
    },
    "29": {
        "question": "Match strings not starting with `e` or `p` or `u`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "surrender unicorn newer _b",
            "door empty 2good eel",
            "_end",
            "Pest"
        ],
        "right column": [
            "early",
            "present",
            "unit: m",
            "eel"
        ],
        "Reference solution": "re.search(r'\\A[^epu]', s)"
    },
    "30": {
        "question": "Match strings containing `u` or `w` or `ee` or `-`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "p-t",
            "thank you",
            "heel",
            "owe",
            "-"
        ],
        "right column": [
            "tea",
            "ear",
            "cat",
            "bad",
            "hello there"
        ],
        "Reference solution": "re.search(r'[uw-]|ee', s)"
    },
    "31": {
        "question": "The given input strings contain fields separated by `,` and fields can be empty too. Replace last three fields with `WHTSZ323`.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "(2),kite,12,,D,C,,",
            "hi,bye,sun,moon"
        ],
        "right column": [
            "(2),kite,12,,D,WHTSZ323",
            "hi,WHTSZ323"
        ],
        "Reference solution": "re.sub(r'(,[^,]*){3}\\Z', r',WHTSZ323', s)"
    },
    "32": {
        "question": "Extract whole words starting with `r` or `s` or `t` and having a maximum of `6` word characters.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "sequoia subtle-exhibit thr33",
            "asset%sets preset tests",
            "site present re_do"
        ],
        "right column": [
            "['subtle', 'thr33']",
            "['sets', 'tests']",
            "['site', 're_do']"
        ],
        "Reference solution": "re.findall(r'\\b[rst]\\w{,5}\\b', s)"
    },
    "33": {
        "question": "Split the given strings based on consecutive sequence of digit or whitespace characters.",
        "flags": "0",
        "function": "re.split",
        "left column": [
            "lion \t Ink32onion Nice",
            "**1\t2\n3star 7 77\t**\nform\ffeed"
        ],
        "right column": [
            "['lion', 'Ink', 'onion', 'Nice']",
            "['**', 'star', '**', 'form', 'feed']"
        ],
        "Reference solution": "re.split(r'[\\d\\s]+', s)"
    },
    "34": {
        "question": "Construct a pattern that splits the given input string to get the output as shown below.",
        "flags": "0",
        "function": "re.split",
        "left column": [
            "food:good",
            "food:good-cool",
            "food:good-cool;tool",
            "42:no-op;10:car-tr:u-ck;SQ1"
        ],
        "right column": [
            "['food:good']",
            "['food:good-cool']",
            "['food', 'cool', 'tool']",
            "['42', 'op', '10', 'tr:u-ck', 'SQ1']"
        ],
        "Reference solution": "re.split(r':[^-]+-([^;]+);', s)"
    },
    "35": {
        "question": "Delete all occurrences of the sequence `<characters>` where `characters` is one or more non `>` characters.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "a<ap\nple>\n1<> b<bye> 2<>"
        ],
        "right column": [
            "a\n1<> b 2<>"
        ],
        "Reference solution": "re.sub(r'<[^>]+>', r'', s)"
    },
    "36": {
        "question": "Match strings whose first non-whitespace character is not a `#` character. Any string made up of only whitespace characters should not be matched.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "sure",
            "\t\napple #42",
            "no#1"
        ],
        "right column": [
            "#oops",
            "\t\n",
            "    #comment"
        ],
        "Reference solution": "re.search(r'\\A\\s*[^#\\s]', s)"
    },
    "37": {
        "question": "Extract all numbers greater than or equal to `100`. Numbers can have leading zeros as well.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "0501 035 154 12 26 98234",
            "099 000100 4567"
        ],
        "right column": [
            "['0501', '154', '98234']",
            "['000100', '4567']"
        ],
        "Reference solution": "re.findall(r'\\b0*[1-9]\\d{2,}', s)"
    },
    "38": {
        "question": "Replace the space character that occurs after a word ending with `a` or `r` with a newline character.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "area not a _a2_ roar took 22"
        ],
        "right column": [
            "area\nnot a\n_a2_ roar\ntook 22"
        ],
        "Reference solution": "re.sub(r'([ar]) ', r'\\1\\n', s)"
    },
    "39": {
        "question": "Swap words that are separated by a comma.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "good,bad (42,24)",
            "report_log,power_report"
        ],
        "right column": [
            "bad,good (24,42)",
            "power_report,report_log"
        ],
        "Reference solution": "re.sub(r'(\\w+),(\\w+)', r'\\2,\\1', s)"
    },
    "40": {
        "question": "Add `[]` around words starting with `s` and containing `e` and `t` in any order.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "sequoia subtle exhibit",
            "asset sets2 tests si_te"
        ],
        "right column": [
            "sequoia [subtle] exhibit",
            "asset [sets2] tests [si_te]"
        ],
        "Reference solution": "re.sub(r'\\bs\\w*(e\\w*t|t\\w*e)\\w*', r'[\\g<0>]', s)"
    },
    "41": {
        "question": "Change `[digits]` to `(digits0)`. For example, `[10]` should be changed to `(100)`.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "[apple] [5] [ball] [0]",
            "[20] pens and (3) pencils"
        ],
        "right column": [
            "[apple] (50) [ball] (00)",
            "(200) pens and (3) pencils"
        ],
        "Reference solution": "re.sub(r'\\[(\\d+)]', r'(\\g<1>0)', s)\nre.sub(r'\\[(\\d+)]', r'(\\1\\060)', s)"
    },
    "42": {
        "question": "Replace all whole words with `X` that start and end with the same word character (irrespective of case). Single character word should get replaced with `X` too, as it satisfies the stated condition.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "oreo not a _a2_ Roar took 22"
        ],
        "right column": [
            "X not X X X took X"
        ],
        "Reference solution": "re.sub(r'\\b(\\w|(\\w)\\w*\\2)\\b', r'X', s, flags=re.I)"
    },
    "43": {
        "question": "Convert the given markdown anchors to hyperlinks as shown below.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "# <a name=\"regex\"></a>Regex",
            "## <a name=\"tip-1\"></a>Tip 1"
        ],
        "right column": [
            "[Regex](#regex)",
            "[Tip 1](#tip-1)"
        ],
        "Reference solution": "re.sub(r'[^\"]+\"([^\"]+)\"></a>(.+)', r'[\\2](#\\1)', s)"
    },
    "44": {
        "question": "Duplicate first field and add it as the last field. Consider comma as the field separator and fields other than the first field could be empty too.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "fork,42,nice,3.14",
            "good,food",
            "2",
            "(a^b),#hi#,,"
        ],
        "right column": [
            "fork,42,nice,3.14,fork",
            "good,food,good",
            "2,2",
            "(a^b),#hi#,,,(a^b)"
        ],
        "Reference solution": "re.sub(r'\\A([^,]+),?.*', r'\\g<0>,\\1', s)"
    },
    "45": {
        "question": "Match strings with words that have at least two occurrences of consecutive repeated word characters. For example, words like `stillness` and `Committee` should be matched but not words like `root` or `readable` or `rotational`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "oppressed abandon accommodation",
            "committed apparition innkeeper",
            "occasionally afforded",
            "depended successfully succeeded"
        ],
        "right column": [
            "abandoned building",
            "horror apparition",
            "afforded luxury",
            "cleanliness"
        ],
        "Reference solution": "re.search(r'(\\w*(\\w)\\2){2}', s)\nre.search(r'(\\w)\\1\\w*(\\w)\\2', s)"
    },
    "46": {
        "question": "Replace all consecutive occurrences of duplicate words with a single copy. Consider the words to be separated by a single space character only.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "aa a a a 42 f_1 f_1 f_13.14 a"
        ],
        "right column": [
            "aa a 42 f_1 f_13.14 a"
        ],
        "Reference solution": "re.sub(r'\\b(\\w+)( \\1)+\\b', r'\\1', s)"
    },
    "47": {
        "question": "For the given input strings, replace all occurrences of digit sequences with only the unique non-repeating sequence. For example, `232323` should be changed to `23` and `897897` should be changed to `897`. If there no repeats (for example `1234`) or if the repeats end prematurely (for example `12121`), it should not be changed.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "1234 2323 453545354535",
            "9339 11 60260260"
        ],
        "right column": [
            "1234 23 4535",
            "9339 1 60260260"
        ],
        "Reference solution": "re.sub(r'\\b(\\d+)\\1+\\b', r'\\1', s)"
    },
    "48": {
        "question": "Replace sequences made up of words separated by `:` or `.` by the first word of the sequence. Such sequences will end when `:` or `.` is not followed by a word character.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "wow:Good:2_two:five: hi-2",
            "bye kite.777.water."
        ],
        "right column": [
            "wow hi-2",
            "bye kite"
        ],
        "Reference solution": "re.sub(r'(\\w+)[:.](\\w+[:.])+', r'\\1', s)"
    },
    "49": {
        "question": "Replace sequences made up of words separated by `:` or `.` by the last word of the sequence. Such sequences will end when `:` or `.` is not followed by a word character.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "wow:Good:2_two:five: hi-2",
            "bye kite.777.water."
        ],
        "right column": [
            "five hi-2",
            "bye water"
        ],
        "Reference solution": "re.sub(r'((\\w+)[:.])+', r'\\2', s)"
    },
    "50": {
        "question": "Split the given input string on one or more repeated sequence of `cat`.",
        "flags": "0",
        "function": "re.split",
        "left column": [
            "firecatlioncatcatcatbearcatcatparrot"
        ],
        "right column": [
            "['fire', 'lion', 'bear', 'parrot']"
        ],
        "Reference solution": "re.split(r'(?:cat)+', s)"
    },
    "51": {
        "question": "Surround all whole words with `()`. Additionally, if the whole word is `imp` or `ant`, delete them.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "Tiger-imp goat ANT",
            "2_eagle ant important"
        ],
        "right column": [
            "(Tiger)-() (goat) (ANT)",
            "(2_eagle) () (important)"
        ],
        "Reference solution": "re.sub(r'\\b(?:imp|ant|(\\w+))\\b', r'(\\1)', s)"
    },
    "52": {
        "question": "Match entire strings that is made up of a sequence of lowercase alphabets followed by `-` followed by digits. They can be optionally surrounded by both `{{` and `}}`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "{{apple-150}}",
            "grape-87",
            "{{i-5}}",
            "fig-42"
        ],
        "right column": [
            "{{mango-100}} 2",
            "{{Apple-150}}",
            "{{cherry-200",
            "2-42"
        ],
        "Reference solution": "re.search(r'\\A({{)?[a-z]+-\\d+(?(1)}})\\Z', s)"
    },
    "53": {
        "question": "Replace all whole words with `X` unless it is preceded by `(` character.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "(apple) guava berry)",
            "apple (mango) (grape"
        ],
        "right column": [
            "(apple) X X)",
            "X (mango) (grape"
        ],
        "Reference solution": "re.sub(r'(?<!\\()\\b\\w+', r'X', s)"
    },
    "54": {
        "question": "Replace all whole words with `X` unless it is followed by `)` character.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "(apple) guava berry)",
            "apple (mango) (grape"
        ],
        "right column": [
            "(apple) X berry)",
            "X (mango) (X"
        ],
        "Reference solution": "re.sub(r'\\b\\w+\\b(?!\\))', r'X', s)"
    },
    "55": {
        "question": "Replace all whole words with `X` unless it is preceded by `(` or followed by `)` characters.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "(apple) guava berry)",
            "apple (mango) (grape"
        ],
        "right column": [
            "(apple) X berry)",
            "X (mango) (grape"
        ],
        "Reference solution": "re.sub(r'(?<!\\()\\b\\w+\\b(?!\\))', r'X', s)"
    },
    "56": {
        "question": "Extract all whole words that do not end with `e` or `n`.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "a_t Row on urn e",
            "noted dust n",
            "a2-e.i)o|u",
            "* cool tool. sunny"
        ],
        "right column": [
            "['a_t', 'Row']",
            "['noted', 'dust']",
            "['a2', 'i', 'o', 'u']",
            "['cool', 'tool', 'sunny']"
        ],
        "Reference solution": "re.findall(r'\\w+\\b(?<![en])', s)"
    },
    "57": {
        "question": "Extract all whole words that do not start with `a` or `d` or `n`.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "at row2 on urn _",
            "e Note dust n"
        ],
        "right column": [
            "['row2', 'on', 'urn', '_']",
            "['e', 'Note']"
        ],
        "Reference solution": "re.findall(r'(?![adn])\\b\\w+', s)"
    },
    "58": {
        "question": "Extract all whole words only if they are followed by `:` or `,` or `-`.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "Poke,on=-=so:ink.",
            "to/is(vast)ever2-sit"
        ],
        "right column": [
            "['Poke', 'so']",
            "['ever2']"
        ],
        "Reference solution": "re.findall(r'\\w+(?=[:,-])', s)"
    },
    "59": {
        "question": "Extract all whole words only if they are preceded by `=` or `/` or `-`.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "Poke,on=-=so:ink.",
            "to/is(vast)ever2-sit"
        ],
        "right column": [
            "['so']",
            "['is', 'sit']"
        ],
        "Reference solution": "re.findall(r'(?<=[=/-])\\w+', s)"
    },
    "60": {
        "question": "Extract all whole words only if they are preceded by `=` or `:` and followed by `:` or `.`.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "Poke,on=-=so:ink.at=to,",
            "to/is(vast)ever2-sit:ant"
        ],
        "right column": [
            "['so', 'ink']",
            "[]"
        ],
        "Reference solution": "re.findall(r'(?<=[=:])\\w+(?=[:.])', s)"
    },
    "61": {
        "question": "Extract all whole words only if they are preceded by `=` or `:` or `.` or `(` or `-` and not followed by `.` or `/`.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "Poke(on/-=so:ink.at=to,",
            "to/is(vast)ever2-sit:ant"
        ],
        "right column": [
            "['so', 'at', 'to']",
            "['vast', 'sit', 'ant']"
        ],
        "Reference solution": "re.findall(r'(?<=[=:.(-])\\w+\\b(?![./])', s)"
    },
    "62": {
        "question": "Remove leading and trailing whitespaces from all the individual fields where `,` is the field separator.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            " hi  ,bye ,cool \t",
            "hello,nice   ice  , 42 ,2",
            "1, ,   stall   small"
        ],
        "right column": [
            "hi,bye,cool",
            "hello,nice   ice,42,2",
            "1,,stall   small"
        ],
        "Reference solution": "re.sub(r'(?<![^,])\\s+|\\s+(?![^,])', r'', s)"
    },
    "63": {
        "question": "Replace all occurrences of `par` with `X` as long as whole word `par` isn't present later in the string.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "apartment parking spot",
            "parse and par and sparse",
            "par not but this par",
            "_par2 spark parpar_"
        ],
        "right column": [
            "aXtment Xking spot",
            "parse and X and sXse",
            "par not but this X",
            "_X2 sXk XX_"
        ],
        "Reference solution": "re.sub(r'par(?!.*\\bpar\\b)', r'X', s)"
    },
    "64": {
        "question": "Replace all occurrences of `par` with `X` as long as `par` is present later in the string.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "apartment parking spot",
            "parse and par and sparse",
            "par not but this par",
            "_par2 spark parpar_"
        ],
        "right column": [
            "aXtment parking spot",
            "Xse and X and sparse",
            "X not but this par",
            "_X2 sXk Xpar_"
        ],
        "Reference solution": "re.sub(r'par(?=.*par)', r'X', s)"
    },
    "65": {
        "question": "Match strings that satisfy all of these rules:\n     * at least two alphabets\n     * at least 3 digits\n     * doesn't end with a whitespace character",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "F2H3u%9",
            "A $B C1234",
            "xyz123",
            "_1a2b3c4d5_"
        ],
        "right column": [
            "hunter2",
            "*X3Yz3.14\t",
            "321a(#)",
            "r2_d2_hi"
        ],
        "Reference solution": "re.search(r'\\A(?=(.*[a-zA-Z]){2})(?=(.*\\d){3})(?!.+\\s\\Z)', s)\nre.search(r'\\A(?=(.*[a-z]){2})(?=(.*\\d){3})(?!.+\\s\\Z)', s, flags=re.I)"
    },
    "66": {
        "question": "For the given strings, surround all whole words with `{}` except for whole words `par` and `cat` and `apple`.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "part; cat {super}",
            "rest_42 par scatter",
            "apple spar"
        ],
        "right column": [
            "{part}; cat {{super}}",
            "{rest_42} par {scatter}",
            "apple {spar}"
        ],
        "Reference solution": "re.sub(r'\\b(?!(?:par|cat|apple)\\b)\\w+', r'{\\g<0>}', s)"
    },
    "67": {
        "question": "Extract integer portion of floating-point numbers for the given string. Integers and numbers ending with `.` but no further digits should not be considered.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "12 ab32.4 go 5 2. 46.42 5"
        ],
        "right column": [
            "['32', '46']"
        ],
        "Reference solution": "re.findall(r'\\d+(?=\\.\\d+)', s)"
    },
    "68": {
        "question": "Convert the given input strings to the corresponding output as shown below.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "cat",
            "1.2-3:4"
        ],
        "right column": [
            "ca\nat",
            "1.\n.2\n2-\n-3\n3:\n:4"
        ],
        "Reference solution": "re.sub(r'.(?=(.).)', r'\\g<0>\\1\\n', s)\nre.sub(r'(?<=.(.)).', r'\\n\\1\\g<0>', s)"
    },
    "69": {
        "question": "The given input strings contain fields separated by `:` character. Delete `:` and the last field if there is a digit character anywhere before the last field.",
        "flags": "0",
        "function": "re.sub",
        "left column": [
            "42:cat",
            "twelve:a2b",
            "we:be:he:0:a:b:bother"
        ],
        "right column": [
            "42",
            "twelve:a2b",
            "we:be:he:0:a:b"
        ],
        "Reference solution": "re.sub(r'(\\d.*):.*', r'\\1', s)"
    },
    "70": {
        "question": "Extract all whole words unless they are preceded by `:` or `<=>` or `----` or `#`.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "::very--at<=>row|in.a_b",
            "#b2c=>lion----east"
        ],
        "right column": [
            "['at', 'in', 'a_b']",
            "['lion']"
        ],
        "Reference solution": "re.findall(r'(?<![:#])(?<!<=>)(?<!-{4})\\b\\w+', s)"
    },
    "71": {
        "question": "Match strings if it contains `qty` followed by `price` but not if there is whitespace or the string `error` between them.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "23,qty,price,42",
            "42\nqty-6,apple-56,price-234,error",
            "(qtyprice) (hi-there)"
        ],
        "right column": [
            "qty price,oh",
            "3.14,\nqty,6,errors,9,price,3",
            "4,price,3.14,qty,4"
        ],
        "Reference solution": "re.search(r'qty((?!\\s|error).)*price', s)"
    },
    "72": {
        "question": "For the given input strings, match all of these three patterns:\n     * `This` case sensitively\n     * `nice` and `cool` case insensitively",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "This is nice and Cool",
            "nice,cool,This",
            "so nice and cool This?"
        ],
        "right column": [
            "Nice and not cool this",
            "This is not cool",
            "not nice"
        ],
        "Reference solution": "re.search(r'(?i)\\A(?=.*nice)(?=.*cool).*(?-i:This)', s)\nre.search(r'\\A(?=.*nice)(?=.*cool).*(?-i:This)', s, flags=re.I)"
    },
    "73": {
        "question": "For the given input strings, match if the string begins with `Th` and also contains a line that starts with `There`.",
        "flags": "0",
        "function": "re.search",
        "left column": [
            "There there\nHave a cookie",
            "This is a mess\nYeah?\nThereeeee"
        ],
        "right column": [
            "Oh\nThere goes the fun",
            "This is not\ngood\nno There"
        ],
        "Reference solution": "re.search(r'\\A(?=Th)(?ms:.*^There)', s)\nre.search(r'\\A(?=Th).*^There', s, flags=re.M|re.S)"
    },
    "74": {
        "question": "Extract all consecutive word characters made up of ASCII characters only.",
        "flags": "0",
        "function": "re.findall",
        "left column": [
            "2fox:\u03b1\u03bb\u03b5_eagle_\u03c0\u03bf\u03cd:good f\u03bf\u03bfd\uff10\uff11",
            "happy learning!"
        ],
        "right column": [
            "['2fox', '_eagle_', 'good', 'f', 'd']",
            "['happy', 'learning']"
        ],
        "Reference solution": "re.findall(r'\\w+', s, flags=re.A)\nre.findall(r'[a-zA-Z0-9_]+', s)"
    }
}